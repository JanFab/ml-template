trigger:
  branches:
    include:
      - main
  tags:
    include:
      - 'v*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.9'
  dockerRegistry: '$(ACR_NAME).azurecr.io'
  imageRepository: 'mnist-api'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Test
  displayName: 'Test and Lint'
  jobs:
  - job: Test
    displayName: 'Run Tests'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
    
    - script: |
        python -m pip install --upgrade pip
        pip install .
        pip install pytest pytest-cov
        pytest tests/ --cov=src/ --cov-report=xml
      displayName: 'Run Tests'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
  
  - job: Lint
    displayName: 'Run Linters'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
    
    - script: |
        pip install black isort flake8
        black . --check
        isort . --check-only
        flake8 .
      displayName: 'Run Linters'

- stage: Build
  displayName: 'Build and Push'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: 'Build and Push Docker Image'
    steps:
    - task: Docker@2
      displayName: 'Build and Push API Image'
      inputs:
        command: buildAndPush
        repository: '$(imageRepository)'
        dockerfile: 'containers/api/Dockerfile'
        containerRegistry: '$(dockerRegistry)'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Deploy'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Development'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(KUBE_SERVICE_CONNECTION_DEV)'
              namespace: 'mnist-dev'
              manifests: |
                $(System.DefaultWorkingDirectory)/k8s/overlays/development
              containers: |
                $(dockerRegistry)/$(imageRepository):$(tag)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  - deployment: DeployProd
    displayName: 'Deploy to Production'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(KUBE_SERVICE_CONNECTION_PROD)'
              namespace: 'mnist-prod'
              manifests: |
                $(System.DefaultWorkingDirectory)/k8s/overlays/production
              containers: |
                $(dockerRegistry)/$(imageRepository):$(tag)
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/')) 